{"version":3,"file":"interface.js","sourceRoot":"","sources":["../../../../../rtp/src/processor/interface.ts"],"names":[],"mappings":";;;AAqBO,MAAM,2BAA2B,GAAG,CAKzC,IAAW,EACX,EAAE;IACF,OAAO,KAAM,SAAQ,IAAI;QAAlB;;YACL;;;;;eAAyB;YACzB;;;;;eAAwB;YAExB;;;;uBAAO,CAAC,EAAuB,EAAE,UAAuB,EAAE,EAAE;oBAC1D,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;oBACb,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;oBAC7B,EAAE,GAAG,SAAgB,CAAC;oBACtB,UAAU,GAAG,SAAS,CAAC;oBACvB,OAAO,IAAI,CAAC;gBACd,CAAC;eAAC;YAEF;;;;uBAAQ,CAAC,KAAY,EAAE,EAAE;oBACvB,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;wBAC7C,IAAI,IAAI,CAAC,EAAE,EAAE;4BACX,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;yBACjB;qBACF;gBACH,CAAC;eAAC;YAEF;;;;uBAAU,GAAG,EAAE;oBACb,IAAI,IAAI,CAAC,UAAU,EAAE;wBACnB,IAAI,CAAC,UAAU,EAAE,CAAC;wBAClB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;qBAC7B;oBACD,IAAI,CAAC,EAAE,GAAG,SAAS,CAAC;gBACtB,CAAC;eAAC;QACJ,CAAC;KAAA,CAAC;AACJ,CAAC,CAAC;AAnCW,QAAA,2BAA2B,+BAmCtC","sourcesContent":["export interface Processor<Input, Output> {\n  processInput: (input: Input) => Output[];\n  toJSON(): Record<string, any>;\n}\n\nexport interface AVProcessor<Input> {\n  processAudioInput: (input: Input) => void;\n  processVideoInput: (input: Input) => void;\n  toJSON(): Record<string, any>;\n}\n\nexport interface SimpleProcessorCallback<Input = any, Output = any> {\n  pipe: (\n    cb: (o: Output) => void,\n    destructor?: () => void,\n  ) => SimpleProcessorCallback<Input, Output>;\n  input: (input: Input) => void;\n  destroy: () => void;\n  toJSON(): Record<string, any>;\n}\n\nexport const SimpleProcessorCallbackBase = <\n  Input,\n  Output,\n  TBase extends new (...args: any[]) => Processor<Input, Output>,\n>(\n  Base: TBase,\n) => {\n  return class extends Base implements SimpleProcessorCallback<Input, Output> {\n    cb?: (o: Output) => void;\n    destructor?: () => void;\n\n    pipe = (cb: (o: Output) => void, destructor?: () => void) => {\n      this.cb = cb;\n      this.destructor = destructor;\n      cb = undefined as any;\n      destructor = undefined;\n      return this;\n    };\n\n    input = (input: Input) => {\n      for (const output of this.processInput(input)) {\n        if (this.cb) {\n          this.cb(output);\n        }\n      }\n    };\n\n    destroy = () => {\n      if (this.destructor) {\n        this.destructor();\n        this.destructor = undefined;\n      }\n      this.cb = undefined;\n    };\n  };\n};\n"]}